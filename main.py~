import datetime
from kivy.app import App
from kivy.network.urlrequest import UrlRequest
from kivy.uix.boxlayout import BoxLayout
from kivy.properties import ObjectProperty, ListProperty, StringProperty, NumericProperty
import json
from kivy.uix.listview import ListItemButton
from kivy.factory import Factory
import random
from kivy.graphics import Color, Ellipse
from kivy.clock import Clock
from kivy.storage.jsonstore import JsonStore

def locations_args_converter(index, data_item):
        city, country = data_item
        return {'location':(city, country)}



class CurrentWeather(BoxLayout):
    location = ListProperty(['Bei Jing', 'CN'])
    conditions = StringProperty()
    temp = NumericProperty()
    temp_min = NumericProperty()
    temp_max = NumericProperty()
    conditions_image = StringProperty()


    def updata_weather(self):
        config = WeatherApp.get_running_app().config
        temp_type = config.getdefault("General", "temp_type", "metric").lower()
        weather_template = 'http://api.openweathermap.org/data/2.5/weather?q={},{}&units={}' \
                           '&appid=d5366aed50c011a271178f9e85175646'
        weather_url = weather_template.format(
            self.location[0],
            self.location[1],
            temp_type
        )
        request = UrlRequest(weather_url, self.weather_retrived)
    def weather_retrived(self, request, data):
        # conditions_image = StringProperty()
        data = json.loads(data.decode()) if not isinstance(data, dict) else data
        # self.render_conditions(data['weather'][0]['description'])
        self.conditions = data['weather'][0]['description']
        self.temp = data['main']['temp']
        self.temp_min = data['main']['temp_min']
        self.temp_max = data['main']['temp_max']
        self.conditions_image = "http://openweathermap.org/img/w/{}.png".format(data['weather'][0]['icon'])

    def render_conditions(self, conditions_description):
        if "clear" in conditions_description.lower():
            conditions_widget = Factory.ClearConditions()
        elif "snow" in conditions_description.lower():
            conditions_widget = SnowConditions()
        else:
            conditions_widget = Factory.UnknownConditions()
        conditions_widget.conditions = conditions_description
        # self.conditions.clear_widgets()
        self.conditions.add_widget(conditions_widget)

class Forecast(BoxLayout):
    location = ListProperty(['Bei Jing', 'CN'])
    forcast_container = ObjectProperty()

    def update_weather(self):
        config = WeatherApp.get_running_app().config
        temp_type = config.getdefault("General", "temp_type", "metric").lower()
        weather_template = 'http://api.openweathermap.org/data/2.5/forecast/daily?q={},{}&units={}&cnt=3'
        weather_url = weather_template.format(
            self.location[0],
            self.location[1],
            temp_type
        )
        request = UrlRequest(weather_url, self.weather_retrieved)

    def weather_retrieved(self, request, data):
        data = json.loads(data.decode()) if not isinstance(data, dict) else data
        self.forcast_container.clear_widgets()
        for day in data['list']:
            label = Factory.ForecastLabel()
            label.date = datetime.datetime.fromtimestamp(day['dt']).strftime("%a %b %d")
            label.conditions = day['weather'][0]['description']
            label.conditions_image = "http://openweathermap.org/img/w/{}.png".format(day['weather'][0]['icon'])
            label.temp_min = day['temp']['min']
            label.temp_max = day['temp']['max']
            self.forcast_container.add_widget(label)

class Conditions(BoxLayout):
    conditions = StringProperty()

class SnowConditions(Conditions):
    FLAKE_SIZE = 5
    NUM_FLAKES = 60
    FLAKE_AREA = FLAKE_SIZE * NUM_FLAKES
    FLAKE_INTERVAL = 1.0/3.0
    def __int__(self, **kwargs):
        super(SnowConditions, self).__init__(**kwargs)
        self.flakes = [[x * self.FLAKE_SIZE, 0] for x in range(self.NUM_FLAKES)]
        Clock.schedule_interval(self.update_flakes, self.FLAKE_INTERVAL)
    def update_flakes(self, time):
        for f in self.flakes:
            f[0] += random.choice([-1, 1])
            f[1] -= random.randint(0, self.FLAKE_SIZE)
            if f[1] <= 0:
                f[1] = random.randint(0, int(self.height))
        self.canvas.before.clear()
        with self.canvas.before:
            widget_x = self.center_x - self.FLAKE_AREA / 2
            widget_y = self.pos[1]
            for x_flake, y_flake in self.flakes:
                x = widget_x + x_flake
                y = widget_y + y_flake
                Color(0.9, 0.9, 1.0)
                Ellipse(pos=(x, y), size=(self.FLAKE_SIZE, self.FLAKE_SIZE))

class WeatherRoot(BoxLayout):
    current_weather = ObjectProperty()
    locations = ObjectProperty()
    forecast = ObjectProperty()

    def __init__(self, **kwargs):
        super(WeatherRoot, self).__init__(**kwargs)
        self.store = JsonStore("weather_store.json")
        if self.store.exists('location'):
            current_location = self.store.get("location")["current_location"]
            self.show_current_weather(current_location)

    def show_current_weather(self, location=None):
        self.clear_widgets()
        if self.current_weather is None:
            self.current_weather = CurrentWeather()
        if self.locations is None:
            self.locations = Factory.Locations()
            if (self.store.exists('locations')):
                locations = self.store.get("locations")['locations']
                self.locations.locations_list.adapter.data.extend(locations)
            # current_weather = Factory.CurrentWeather()
            # current_weather.location = location
        if location is not None:
            self.current_weather.location = location
            if location not in self.locations.locations_list.adapter.data:
                self.locations.locations_list.adapter.data.append(location)
                self.locations.locations_list._trigger_reset_populate()
                self.store.put("locations", locations= list(self.locations.locations_list.adapter.data),
                               current_location=location
                               )
        self.current_weather.updata_weather()
        self.add_widget(self.current_weather)

    def show_forecast(self, location=None):
        self.clear_widgets()
        if self.forecast is None:
            self.forecast = Factory.Forecast()
            print self.forecast
        if location is not None:
            print "test"
            self.forecast.location = location

        self.forecast.update_weather()
        self.add_widget(self.forecast)


    def show_add_location_form(self):

        self.clear_widgets()
        self.add_widget(AddLocationForm())

    def show_locations(self):
        self.clear_widgets()
        self.add_widget(self.locations)

class LocationButton(ListItemButton):
    location = ListProperty()

class AddLocationForm(BoxLayout):
    search_input = ObjectProperty()

    def search_ll(self):
        search_template = "http://api.openweathermap.org/data/2.5/weather?lat={}" \
                          "&lon={}&appid=d5366aed50c011a271178f9e85175646"
        ll = self.search_input.text.split(',')
        search_url = search_template.format(ll[0], ll[1])
        request = UrlRequest(search_url, self.found_location_ll)

    def search_location(self):
        search_template = "http://api.openweathermap.org/data/2.5/find?q={" \
                          "}&type=like&appid=d5366aed50c011a271178f9e85175646"
        search_url = search_template.format(self.search_input.text)
        request = UrlRequest(search_url, self.found_location)


    def found_location(self, request, data):
        # print json.loads(data.decode())
        data = json.loads(data.decode()) if not isinstance(data, dict) else data
        cities = [(d['name'], d['sys']['country']) for d in data['list']]
        print cities
        # self.search_results.item_strings = cities
        del self.search_results.adapter.data[:]
        self.search_results.adapter.data.extend(cities)
        # self.search_reaults._trigger_reset_populate()

    def found_location_ll(self, request, data):

        if data['cod'] == '404':
            cities = ["please enter right latitude and longitude"]
        else:
            cities = ["{} ({})".format(data['name'], data['sys']['country'])]
        # self.search_results.item_strings = cities
        self.search_results.adapter.data.extend(cities)

class WeatherApp(App):
    def build_config(self, config):
        config.setdefaults('General', {'temp_type': 'Metric'})
    def build_settings(self, settings):
        settings.add_json_panel("Weather Settings", self.config, data="""
            [
                {"type": "options",
                    "title": "Temperature System",
                    "section": "General",
                    "key": "temp_type",
                    "options": ["Metric", "Imperial"]
                }
            ]"""
            )

    def on_config_change(self, config, section, key, value):
        if config is self.config and key == "temp_type":
            try:
                self.root.children[0].update_weather()
            except AttributeError:
                pass

if __name__ == '__main__':
    WeatherApp().run()